#!/bin/bash

# Revenge Installer Framework version 0.04
#
# Written by Jody James
#
#
# This program is free software, provided under the GNU General Public License
# as published by the Free Software Foundation. So feel free to copy, distribute,
# or modify it as you wish.
#
# Special Recognition to Carl Duff, as some code was adapted from the Architect Installer
# Special Recognition to 'angeltoast' as some code was adapted from the Feliz Installer
#
#
# Selecting the Drive
man_partition() {
list=` lsblk -lno NAME,TYPE,SIZE,MOUNTPOINT | grep "disk" `

zenity --info --title="$title" --text "Below is a list of the available drives on your system:\n\n$list" --height=10 width=150

lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u > devices.txt
sed -i 's/\<disk\>//g' devices.txt
devices=` awk '{print "FALSE " $0}' devices.txt `

dev=$(zenity --list --title="$title" --radiolist --text "Select the drive that you want to use for installation." --column Drive --column Info $devices)

# Partitioning
# Allow user to partition using gparted
zenity --question --title="$title" --height=40 --text "Do you need to partition $dev?\nSelect 'yes' to open gparted and partition\nthe disk or format partitions if needed.\nThe installer will not format the partitions after this,\nso if your partitions need to be formatted please select yes\nand use gparted to format them now.\nThe installer supports using a seperate /boot /home /root and swap partitions."
if [ "$?" = "0" ]
	then gparted
fi

	# Select root partition
	root_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
	xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the root partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
	--radiolist --multiple --column ' ' --column 'Partitions')
	#mounting root partition
	mount $root_part /mnt

	# Swap partition?
	zenity --question --title="$title" --text "Do you want to use a swap partition?" --height=40
		if [ "$?" = "0" ]
		then swap_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
	xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the swap partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
	--radiolist --multiple --column ' ' --column 'Partitions')
		mkswap $swap_part
		swapon $swap_part
		fi

	# Boot Partition?
	zenity --question --title="$title" --text "Do you want to use a seperate boot partition?" --height=40
		if [ "$?" = "0" ]
		then boot_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
		xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the boot partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
--radiolist --multiple --column ' ' --column 'Partitions')

		mkdir -p /mnt/boot
		mount $boot_part /mnt/boot

		fi

	# Home Partition?
	zenity --question --title="$title" --text "Do you want to use a seperate home partition?" --height=40
		if [ "$?" = "0" ]
		then home_part=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  | sort | awk '{ printf "FALSE""\0"$0"\0" }' | \
		xargs -0 zenity --list --title="$title" --text="Choose a partition to use for the home partition\nWarning, this list shows all available partitions on all available drives.\nPlease choose with care." \
		--radiolist --multiple --column ' ' --column 'Partitions')
		# mounting home partition
		mkdir -p /mnt/home
		mount $root_part /mnt/home
		fi
}

auto_partition() {
	list=` lsblk -lno NAME,TYPE,SIZE,MOUNTPOINT | grep "disk" `

	zenity --info --title="$title" --text "Below is a list of the available drives on your system:\n\n$list" --height=10 width=150

	lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u > devices.txt
	sed -i 's/\<disk\>//g' devices.txt
	devices=` awk '{print "FALSE " $0}' devices.txt `

	dev=$(zenity --list --title="$title" --radiolist --text "Select the drive that you want to use for installation." --column Drive --column Info $devices)

	yn=$(zenity --list --title="$title" --text "Warning! This will erase all data on $dev\!\nAre you sure you want to continue?\nSelect 'Yes' to continue and 'No' to go back." --radiolist --column Select --column Option TRUE yes FALSE no)

	if [ "$yn" = "no" ]
	then partition

	fi

	# Find total amount of RAM
	ram=$(grep MemTotal /proc/meminfo | awk '{print $2/1024}' | sed 's/\..*//')
	# Find where swap partition stops
	num=4000

	if [ "$ram" -gt "$num" ]
		then swap_space=4096
		else swap_space=$ram
	fi
	
	uefi_swap=$(($swap_space + 513))


	#BIOS or UEFI
    if [ "$SYSTEM" = "BIOS" ]
        then
	       (echo "# Creating Partitions for BIOS..."
	        dd if=/dev/zero of=$dev bs=512 count=1
	        Parted "mklabel msdos"
	        Parted "mkpart primary linux-swap 1MiB ${swap_space}MiB"
	        Parted "mkpart primary ext4 ${swap_space}MiB 100%"
	        Parted "set 2 boot on"
	        mkswap ${dev}1
	        swapon ${dev}1
	        mkfs.ext4 -F ${dev}2
	        mount ${dev}2 /mnt) | zenity --progress --title="$title" --width=450 --pulsate --auto-close --no-cancel
	    else
            	(echo "# Creating Partitions for UEFI..."
            	dd if=/dev/zero of=$dev bs=512 count=1
            	Parted "mklabel gpt"
            	Parted "mkpart primary fat32 1MiB 513MiB"
		Parted "mkpart primary linux-swap 513MiB ${uefi_swap}MiB"
		Parted "mkpart primary ext4 ${uefi_swap}MiB 100%"
		Parted "set 1 boot on"
		mkfs.fat -F32 ${dev}1
		mkfs.ext4 -F ${dev}3
		mkswap ${dev}2
		swapon ${dev}2
		mount ${dev}3 /mnt
		mkdir -p /mnt/boot
		mount ${dev}1 /mnt/boot) | zenity --progress --title="$title" --width=450 --pulsate --auto-close --no-cancel
	fi
			
}

partition() {
	ans=$(zenity --list --title="$title" --radiolist --text "Would you like to use automatic partitioning or would you like to partition the disk for installation yourself?\nAutomatic Partitioning will completely erase the disk that you select and install Arch." --column Select --column Choice FALSE "Automatic Partitioning" FALSE "Manual Partitioning")

	if [ "$ans" = "Automatic Partitioning" ]
	then auto_partition
	else
	man_partition
	fi

}

configure() {
# Getting Locale
locales=$(cat /etc/locale.gen | grep -v "#  " | sed 's/#//g' | sed 's/ UTF-8//g' | grep .UTF-8 | sort | awk '{ printf "FALSE ""\0"$0"\0" }')

locale=$(zenity --list --title="$title" --radiolist --text "Select your locale/language.\nThe default is American English 'en_US.UTF-8'." --column Select --column Locale TRUE en_US.UTF-8 $locales --height=350 --width=300)

# Getting Keyboard Config
keymaps=("TRUE us FALSE af FALSE al FALSE am FALSE at FALSE az FALSE ba FALSE bd FALSE be FALSE bg FALSE br FALSE bt FALSE bw FALSE by FALSE ca FALSE cd FALSE ch FALSE cm FALSE cn FALSE cz FALSE de FALSE dk FALSE ee FALSE es FALSE et FALSE eu FALSE fi FALSE fo FALSE fr FALSE gb FALSE ge FALSE gh FALSE gn FALSE gr FALSE hr FALSE hu FALSE ie FALSE il FALSE in FALSE iq FALSE ir FALSE is FALSE it FALSE jp FALSE ke FALSE kg FALSE kh FALSE kr FALSE kz FALSE la FALSE lk FALSE lt FALSE lv FALSE ma FALSE md FALSE me FALSE mk FALSE ml FALSE mm FALSE mn FALSE mt FALSE mv FALSE ng FALSE nl FALSE no FALSE np FALSE pc FALSE ph FALSE pk FALSE pl FALSE pt FALSE ro FALSE rs FALSE ru FALSE se FALSE si FALSE sk FALSE sn FALSE sy FALSE tg FALSE th FALSE tj FALSE tm FALSE tr FALSE tw FALSE tz FALSE ua FALSE uz FALSE vn FALSE za")

keymap=$(zenity --list --title="$title" --radiolist --text "Select your keyboard layout for the installed system.\nThe default is American 'us'." --column Select --column Locale $keymaps --height=350 --width=300)

# Getting Timezone
zones=$(cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "/" | sed "s/\/.*//g" | sort -ud | sort | awk '{ printf " FALSE ""\0"$0"\0" }')

zone=$(zenity --list --title="$title" --radiolist --text "Select your country/zone." --column Select --column Zone $zones --height=350 --width=300)

subzones=$(cat /usr/share/zoneinfo/zone.tab | awk '{print $3}' | grep "$zone/" | sed "s/$zone\///g" | sort -ud | sort | awk '{ printf " FALSE ""\0"$0"\0" }')

subzone=$(zenity --list --title="$title" --radiolist --text "Select your sub-zone." --column Select --column Zone $subzones --height=350 --width=300)

# Getting Clock Preference
clock=$(zenity --list --title="$title" --radiolist --text "Would you like to use UTC or Local Time\nUTC is recommended unless you are dual booting with Windows." --column Select --column Time TRUE utc FALSE localtime)

# Getting hostname, username, root password, and user password
hname=$(zenity --entry --title="$title" --text "Please enter a hostname for your system.\nIt must be in all lowercase letters." --entry-text "revenge")

username=$(zenity --entry --title="$title" --text "Please enter a username for the new user.\nAgain, in all lowercase." --entry-text "user")
}

root_password() {
rtpasswd=$(zenity --entry --title="$title" --text "Please enter a root password." --hide-text)
rtpasswd2=$(zenity --entry --title="$title" --text "Please re-enter your root password." --hide-text)
	if [ "$rtpasswd" != "$rtpasswd2" ]
		then zenity --error --title="$title" --text "The passwords did not match, please try again." --height=40
		root_password
	fi
}


user_password() {
userpasswd=$(zenity --entry --title="$title" --text "Please enter a password for $username." --hide-text)
userpasswd2=$(zenity --entry --title="$title" --text "Please re-enter a password for $username." --hide-text)
	if [ "$userpasswd" != "$userpasswd2" ]
		then zenity --error --title="$title" --text "The passwords did not match, please try again." --height=40
		user_password
	fi
}

# bootloader?
bootloader() {
lsblk -lno NAME,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u > devices.txt
sed -i 's/\<disk\>//g' devices.txt
devices=` awk '{print "FALSE " $0}' devices.txt `

grub=$(zenity --list --title="$title" --text "Would you like to install the bootloader?\nThe answer to this is usually yes,\nunless you are dual-booting and plan to have another system handle\nthe boot process." --radiolist --column Select --column Choice FALSE "yes" FALSE "no")
if [ "$grub" = "yes" ]
	then grub_device=$(zenity --list --title="$title" --text "Where do you want to install the bootloader?" --radiolist --column Select --column Device $devices)
fi
}

# Installation
installing() {
zenity --question --title="$title" --text "Please click yes to begin installation.\nClick no to abort installation." --height=40

if [ "$?" = "1" ]
	then exit
fi

( 
  echo "# Copying Files..."
  MOUNTPOINT="/mnt"
  BYPASS="$MOUNTPOINT/bypass/"
  ARCHI=$(uname -m)
  # Change installation method depending on use of img or sfs
  if [[ -e /run/archiso/sfs/airootfs/airootfs.img ]]; then
     AIROOTIMG="/run/archiso/sfs/airootfs/airootfs.img"
     mkdir -p ${BYPASS} 2>/tmp/.errlog
	 mount ${AIROOTIMG} ${BYPASS}
	 rsync -a --progress ${BYPASS} ${MOUNTPOINT}/
	 umount -l ${BYPASS}
  else
     AIROOTIMG="/run/archiso/sfs/airootfs/"
     rsync -a --progress ${AIROOTIMG} ${MOUNTPOINT}/ 
  fi
  
  # set up kernel for mkiniticpio
  cp /run/archiso/bootmnt/arch/boot/${ARCHI}/vmlinuz ${MOUNTPOINT}/boot/vmlinuz-linux

  # copy over new mirrorlist
  cp /etc/pacman.d/mirrorlist ${MOUNTPOINT}/etc/pacman.d/mirrorlist
  
  # Clean up installation
  [[ -d ${MOUNTPOINT}/abif-master ]] && rm -R ${MOUNTPOINT}/abif-master
  rm -rf ${MOUNTPOINT}/vomi 2>>/tmp/.errlog
  rm -rf ${BYPASS} 2>>/tmp/.errlog
  rm -rf ${MOUNTPOINT}/source 2>>/tmp/.errlog
  rm -rf ${MOUNTPOINT}/src 2>>/tmp/.errlog
  rmdir ${MOUNTPOINT}/bypass 2>>/tmp/.errlog
  rmdir ${MOUNTPOINT}/src 2>>/tmp/.errlog
  rmdir ${MOUNTPOINT}/source 2>>/tmp/.errlog
  rm -f ${MOUNTPOINT}/etc/sudoers.d/g_wheel 2>>/tmp/.errlog
  rm -f ${MOUNTPOINT}/var/lib/NetworkManager/NetworkManager.state 2>>/tmp/.errlog
  rm -f ${MOUNTPOINT}/update-abif 2>>/tmp/.errlog
  sed -i 's/.*pam_wheel\.so/#&/' ${MOUNTPOINT}/etc/pam.d/su 2>>/tmp/.errlog
 
  # clean out archiso files from install
  find ${MOUNTPOINT}/usr/lib/initcpio -name archiso* -type f -exec rm '{}' \;
 
  # systemd
  rm -R ${MOUNTPOINT}/etc/systemd/system/getty@tty1.service.d
  rm ${MOUNTPOINT}/etc/systemd/system/default.target

  # Journal
  sed -i 's/volatile/auto/g' ${MOUNTPOINT}/etc/systemd/journald.conf
 
  # Stop pacman complaining
  arch_chroot "mkdir -p /var/lib/pacman/sync"
  arch_chroot "touch /var/lib/pacman/sync/{core.db,extra.db,community.db}"

  # Fix NetworkManager
  arch_chroot "systemctl enable NetworkManager -f"
  
  # Display Manager
  arch_chroot "systemctl enable lightdm.service"
  
  # Virtualbox Guest
  [[ $(lspci | grep -i "vga" | sed 's/.*://' | sed 's/(.*//' | sed 's/^[ \t]*//' | grep -i "virtualbox") != "" ]] && arch_chroot "systemctl enable vboxservice"
  

#generating fstab
echo "# Generating File System Table..."
genfstab -p /mnt > /mnt/etc/fstab

#root password
echo "# Setting root password..."
touch .passwd
echo -e "$rtpasswd\n$rtpasswd2" > .passwd
arch_chroot "passwd root" < .passwd >/dev/null
rm .passwd

echo "# Making new user..."
# Convert live account to entered username - group, password, folder, and ownership
	   sed -i "s/liveuser/$username/g" ${MOUNTPOINT}/etc/group
	   sed -i "s/liveuser/$username/g" ${MOUNTPOINT}/etc/gshadow
	   sed -i "s/liveuser/$username/g" ${MOUNTPOINT}/etc/passwd
	   sed -i "s/liveuser/$username/g" ${MOUNTPOINT}/etc/shadow
	   mv ${MOUNTPOINT}/home/liveuser ${MOUNTPOINT}/home/$username
	   chown -R $username:users ${MOUNTPOINT}/home/$username
	
	  touch .passwd
      echo -e "$userpasswd\n$userpasswd2" > .passwd
      arch_chroot "passwd $username" < .passwd >/dev/null
      rm .passwd
        
	   # Change sudoers file to require passwords for sudo commands
	   sed -i '/%wheel ALL=(ALL) ALL/s/^#//' ${MOUNTPOINT}/etc/sudoers
	   sed -i '/%wheel ALL=(ALL) ALL NOPASSWD: ALL/s/#%wheel ALL=(ALL) ALL NOPASSWD: ALL//' ${MOUNTPOINT}/etc/sudoers

#setting locale
echo "# Generating Locale..."
echo "LANG=\"${locale}\" > /mnt/etc/locale.conf
echo "${locale} UTF-8" > /mnt/etc/locale.gen
arch_chroot "locale-gen"
export LANG=${locale}

#setting keymap
echo "KEYMAP=${keymap}" > /mnt/etc/vconsole.conf
echo -e "Section "\"InputClass"\"\nIdentifier "\"system-keyboard"\"\nMatchIsKeyboard "\"on"\"\nOption "\"XkbLayout"\" "\"${keymap}"\"\nEndSection" > /mnt/etc/X11/xorg.conf.d/00-keyboard.conf


#setting timezone
echo "# Setting Timezone..."
arch_chroot "rm /etc/localtime"
arch_chroot "ln -s /usr/share/zoneinfo/${zone}/${subzone} /etc/localtime"

#setting hw clock
echo "# Setting System Clock..."
arch_chroot "hwclock --systohc --$clock"

#setting hostname
echo "# Setting Hostname..."
arch_chroot "rm /etc/hostname"
arch_chroot "echo $hname > /etc/hostname

# set up kernel for mkiniticpio
cp /run/archiso/bootmnt/arch/boot/${ARCHI}/vmlinuz ${MOUNTPOINT}/boot/vmlinuz-linux 2>>/tmp/.errlog

# running mkinit
echo "# Running mkinitcpio..."
arch_chroot "mkinitcpio -p linux"

# installing bootloader
if [ "$grub" = "yes" ]
	then if [ "$SYSTEM" = 'BIOS' ]
		then echo "# Installing Bootloader..."
		arch_chroot "grub-install --target=i386-pc $grub_device"
		arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
	else
		echo "# Installing Bootloader..."


		if [ "$ans" = "Automatic Partitioning" ]
			then root_part=${dev}3
		fi

		[[ $(echo $root_part | grep "/dev/mapper/") != "" ]] && bl_root=$root_part \
		|| bl_root=$"PARTUUID="$(blkid -s PARTUUID ${root_part} | sed 's/.*=//g' | sed 's/"//g')

		bootctl --path=/boot install
		echo -e "default  Arch\ntimeout  10" > /mnt/boot/loader/loader.conf
		[[ -e /mnt/boot/initramfs-linux.img ]] && echo -e "title\tArch Linux\nlinux\t/vmlinuz-linux\ninitrd\t/initramfs-linux.img\noptions\troot=${bl_root} rw" > /mnt/boot/loader/entries/Arch.conf
		[[ -e /mnt/boot/initramfs-linux-lts.img ]] && echo -e "title\tArchLinux LTS\nlinux\t/vmlinuz-linux-lts\ninitrd\t/initramfs-linux-lts.img\noptions\troot=${bl_root} rw" > /mnt/boot/loader/entries/Arch-lts.conf
		[[ -e /mnt/boot/initramfs-linux-grsec.img ]] && echo -e "title\tArch Linux Grsec\nlinux\t/vmlinuz-linux-grsec\ninitrd\t/initramfs-linux-grsec.img\noptions\troot=${bl_root} rw" > /mnt/boot/loader/entries/Arch-grsec.conf
		[[ -e /mnt/boot/initramfs-linux-zen.img ]] && echo -e "title\tArch Linux Zen\nlinux\t/vmlinuz-linux-zen\ninitrd\t/initramfs-linux-zen.img\noptions\troot=${bl_root} rw" > /mnt/boot/loader/entries/Arch-zen.conf
		fi
fi

# unmounting partitions
umount -R /mnt

echo "# Installation Finished!"
) | zenity --progress --title="$title" --width=450 --pulsate --no-cancel

}

# execution
# System Detection
if [[ -d "/sys/firmware/efi/" ]]; then
      SYSTEM="UEFI"
      else
      SYSTEM="BIOS"
fi


# Setting variables
title="Revenge Intaller Framework 0.10 $SYSTEM"

# Adapted from AIS. An excellent bit of code!
arch_chroot() {
    arch-chroot /mnt /bin/bash -c "${1}"
}

# Adapted from Feliz Installer
Parted() {
	parted --script $dev "$1"
}
# Greeting the user
zenity --question --title="$title" --text "Welcome to the Revenge Installer.\n\nNext you will be prompted with a series of questions that will\nguide you through installing Arch Linux.\nYou will be asked if you want to use manual or auto partitioning.\nIf you select auto partitioning the drive that you select will be completely deleted\nand Arch will be installed. If you select manual, you will have the opportunity to partition the disk yourself\nand select which partitons to use for installation.\nClick 'yes' to begin or 'no' to exit." --height=50

if [ "$?" = "1" ]
	then exit
fi

partition
configure
root_password
user_password
bootloader
installing
